import dependencies.AndroidDependencies
import dependencies.DevelopmentDependencies
import dependencies.FirebaseDependencies
import dependencies.TestDependencies

plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs'
    id 'com.google.devtools.ksp' version "$google_ksp_version"
}
apply plugin: 'kotlin-kapt'
apply from: '../config/detekt/detekt.gradle'

def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

def releasePropertiesFile = rootProject.file("release.properties")
def releaseProperties = new Properties()
releaseProperties.load(new FileInputStream(releasePropertiesFile))

android {
    namespace 'com.marcelo.marvelheroes'
    compileSdkVersion 33

    signingConfigs {
        release {
            storeFile file(releaseProperties['STORE_FILE_KEY'])
            storePassword releaseProperties['STORE_PASSWORD_KEY']
            keyPassword releaseProperties['PASSWORD_KEY']
            keyAlias releaseProperties['ALIAS_KEY']
        }
    }

    defaultConfig {
        applicationId "com.marcelo.marvelheroes"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
        archivesBaseName = "Marvel Heroes"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        buildConfigField "String", "PUBLIC_KEY", apikeyProperties['PUBLIC_KEY']
        buildConfigField "String", "PRIVATE_KEY", apikeyProperties['PRIVATE_KEY']
        buildConfigField "String", "BASE_URL_API", apikeyProperties['BASE_URL_API']
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    applicationVariants.configureEach { variant ->
        kotlin.sourceSets {
            getByName(name) {
                kotlin.srcDir("build/generated/ksp/${variant.name}/kotlin")
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            debuggable true
        }
        beta {
            initWith debug
            applicationIdSuffix '.beta'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-rules-beta.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation AndroidDependencies.androidx_core
    implementation AndroidDependencies.androidx_appcompat
    implementation AndroidDependencies.androidx_constraint_layout
    implementation AndroidDependencies.android_material_design

    implementation DevelopmentDependencies.koin
    implementation DevelopmentDependencies.koin_annotations
    ksp DevelopmentDependencies.koin_compiler

    api(platform(FirebaseDependencies.firebase_bom))
    implementation FirebaseDependencies.firebase_analytics

    api(platform(DevelopmentDependencies.ok_http_bom))
    implementation DevelopmentDependencies.ok_http
    implementation DevelopmentDependencies.ok_http_interceptor

    implementation DevelopmentDependencies.retrofit
    implementation DevelopmentDependencies.retrofit_converter_gson
    implementation DevelopmentDependencies.gson

    implementation DevelopmentDependencies.paging_3

    implementation DevelopmentDependencies.coroutines
    implementation DevelopmentDependencies.coroutines_core

    implementation DevelopmentDependencies.glide
    kapt DevelopmentDependencies.glide_compiler

    implementation DevelopmentDependencies.shimmer

    implementation DevelopmentDependencies.room_ktx
    implementation DevelopmentDependencies.room_runtime
    kapt DevelopmentDependencies.room_compiler

    implementation DevelopmentDependencies.datastore_preferences

    implementation DevelopmentDependencies.navigation_fragment
    implementation DevelopmentDependencies.navigation_ui

    implementation DevelopmentDependencies.lifecycle_view_model
    implementation DevelopmentDependencies.lifecycle_live_data
    implementation DevelopmentDependencies.lifecycle_runtime

    testImplementation TestDependencies.junit
    testImplementation TestDependencies.mockk
    testImplementation TestDependencies.mockito_core
    testImplementation TestDependencies.mockito_kotlin
    testImplementation TestDependencies.androidx_junit
    testImplementation TestDependencies.androidx_core_testing
    testImplementation TestDependencies.coroutines_test
    testImplementation TestDependencies.koin_test

    androidTestImplementation TestDependencies.koin_test
    androidTestImplementation TestDependencies.koin_test_junit
    androidTestImplementation TestDependencies.junit
    androidTestImplementation TestDependencies.androidx_core_testing
    androidTestImplementation TestDependencies.androidx_test_runner
    androidTestImplementation TestDependencies.androidx_espresso_contrib
    androidTestImplementation TestDependencies.androidx_espresso_core
    androidTestImplementation TestDependencies.ok_http_mock_test
    androidTestUtil TestDependencies.androidx_test_orchestrator
    debugImplementation TestDependencies.fragment_testing
}